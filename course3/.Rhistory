XX <- X[which(X$var2 > 8),]
XX
XX
# dealing with missing values NA????
XX <- X[which(X$var2 >= 7),]
XX
X
# dealing with missing values NA????
XX <- X[which(X$var2 > 6),]
XX # R does not change the original X so you have to save it in a var
# order a df by a particular variable
X[order(X$var1)]
# order a df by a particular variable
X[order(X$var1),]
X[order(X$var1, X$var2),]
set.seed(7)
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X
X <- X[sample(1:5),]
X
X$var2[c(1,3)] = NA
X[order(X$var1, X$var2),]
set.seed(7)
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X
X <- X[sample(1:5),]
X
X$var2[c(1,3)] = NA
X
X[order(X$var1, X$var2),]
# same thing can be done with dply library
library(dplyr)
arrange(X, var1)
arrange(X, desc(var1))
# adding rows and columns to the df
X$var4 <- rnomr(5)
# adding rows and columns to the df
X$var4 <- rnorm(5)
X
# another way
cbind(X, rnorm(5))
# if you want to add the column to the left side
cbind(rnorm(5), X)
# summarizing data
# check if the folder is there
if(!file.exists("./Users/Beeta/Rcodes/datasciencecoursera/course3")) {dir.create("./Users/Beeta/Rcodes/datasciencecoursera/course3")}
# summarizing data
# check if the folder is there
if(!file.exists("/Users/Beeta/Rcodes/datasciencecoursera/course3")) {dir.create("/Users/Beeta/Rcodes/datasciencecoursera/course3")}
fileUrl <- "https://data.baltimorecity.gov/resource/k5ry-ef3g.json"
download.file(fileUrl, destfile = "/Users/Beeta/Rcodes/datasciencecoursera/course3", method = "curl")
# summarizing data
# check if the folder is there
if(!file.exists("/Users/Beeta/Rcodes/datasciencecoursera/course3")) {dir.create("/Users/Beeta/Rcodes/datasciencecoursera/course3")}
# fileUrl <- "https://data.baltimorecity.gov/resource/k5ry-ef3g.json"
# download.file(fileUrl, destfile = "/Users/Beeta/Rcodes/datasciencecoursera/course3", method = "curl")
resturantdata <- read.csv("/Users/Beeta/Rcodes/datasciencecoursera/course3/Restaurants.csv")
summary(resturantdata)
str(resturantdata)
quantile(resturantdata$councilDistrict, na.rm = TRUE)
quantile(resturantdata$councilDistrict, probs = c(0.5, 0.75, 0.9))
table(resturantdata$zipcode, useNA = "ifany")
table(resturantdata$zipCode, useNA = "ifany")
# make table from your data
table(resturantdata$councilDistrict, resturantdata$zipCode)
sum(is.na(resturantdata$councilDistrict))
any(is.na(resturantdata$councilDistrict))
all(is.na(resturantdata$zipCode))
all(is.na(resturantdata$zipCode > 0))
# row and col sums with colSums and rowSums
colSums(is.na(resturantdata))
all(colSums(is.na(resturantdata))==0)
# row and col sums with colSums and rowSums
colSums(is.na(resturantdata))
all(colSums(is.na(resturantdata))==0)
# finding values with specific charesteristics
table(resturantdata$zipCode %in% c("21212"))
table(resturantdata$zipCode %in% c("21212", "21213"))
# finding values with specific charesteristics
table(resturantdata$zipCode == "21212")
# subset the resturants that are in specific zip codes
table(table(resturantdata$zipCode %in% c("21212", "21213")))
# subset the resturants that are in specific zip codes
resturantdata(resturantdata$zipCode %in% c("21212", "21213"))
# subset the resturants that are in specific zip codes
resturantdata[resturantdata$zipCode %in% c("21212", "21213")]
# subset the resturants that are in specific zip codes
resturantdata[resturantdata$zipCode %in% c("21212", "21213"),]
# cross tabs
data("UCBAdmissions")
DF = as.data.frame(UBCAdmissions)
DF = as.data.frame("UCBAdmissions")
summary(DF)
# cross tabs
data("UCBAdmissions")
DF = as.data.frame("UCBAdmissions")
summary(DF)
str(DF)
xt <- xtabs(Freq ~ Gender+ Admit, data=DF)
xt
xt <- xtabs(Freq ~ Gender + Admit, data=DF)
xtabs()
xtabs()
xtabs(Gender + Admit, data=DF))
xtabs(Gender + Admit, data=DF)
xtabs(Gender+Admit, data=DF)
# cross tabs
data("UCBAdmissions")
DF = as.data.frame("UCBAdmissions")
summary(DF)
str(DF)
xtabs(Gender+Admit, data=DF)
head(DF)
# cross tabs
data("UCBAdmissions")
DF = as.data.frame("UCBAdmissions")
head(DF)
# cross tabs
data(UCBAdmissions)
DF = as.data.frame(UCBAdmissions)
head(DF)
summary(DF)
str(DF)
xt <- xtabs(Freq ~ Gender + Admit, data=DF)
xt
warpbreaks$replicate <- rep(1:9, len = 54)
xt = xtabs(breaks ~.,data = warpbreaks)
xt
# flat tables
ftable(xt)
# figure out the size of a dataset
fakedata = rnorm(1e5)
object.size(fakedata)
print(object.size(fakedata), units = "Mb")
# method 1
s1 <- seq(1:10, by=2)
s1
# method 1
s1 <- seq(1,10, by=2)
s1
# method 2
s2 <- seq(1,10, length = 3)
s2
# method 3
x <- c(1, 3, 8, 25, 100)
seq(along=x)
# subsetting variables
resturantdata$nearMe = resturantdata$neighborhood %in% c("Roland Park", "Homeland")
table(resturantdata)
table(resturantdata$nearMe)
table(resturantdata$zipWrong, resturantdata$zipCode)
# creating binary variables
resturantdata$zipWrong = ifelse(resturantdata$zipCode < 0, TRUE, FALSE)
table(resturantdata$zipWrong, resturantdata$zipCode)
table(resturantdata$zipWrong, resturantdata$zipCode < 0)
# creating categorical variables
resturantdata$zipGroup = cut(resturantdata$zipCode, breaks = quantile(resturantdata$zipCode))
table(resturantdata$zipGroup)
table(resturantdata$zipGroup, resturantdata$zipCode)
# easier cutting
library(Hmisc)
resturantdata$zipGroup = cut2(resturantdata$zipCode, g=4)
table(resturantdata$zipGroup)
# creating factor variables
resturantdata$zcf <- factor(resturantdata$zipCode)
resturantdata$zcf[1:10]
# there are 32 levels for zip codes
class(resturantdata$zcf)
# easier cutting
library(Hmisc)
resturantdata$zipGroup = cut2(resturantdata$zipCode, g=4)
table(resturantdata$zipGroup)
# creating factor variables
resturantdata$zcf <- factor(resturantdata$zipCode)
resturantdata$zcf[1:10]
# there are 32 levels for zip codes
class(resturantdata$zcf)
# creating categorical variables
resturantdata$zipGroup = cut(resturantdata$zipCode, breaks = quantile(resturantdata$zipCode))
# for example there are 375 zipcodes in 25th to 50th percentile
table(resturantdata$zipGroup)
# creating factor variables
# suppose u want to chnage the zipcodes into factor vars
resturantdata$zcf <- factor(resturantdata$zipCode)
resturantdata$zcf[1:10]
# there are 32 levels for zip codes
class(resturantdata$zcf)
# levels of factor variables
yesno <- sample(c("yes", "no"), size = 10, replace = TRUE)
yesnofac = factor(yesno, levels = c("yes", "no"))
relevel(yesnofac, ref = "yes")
# you can also change it into numeric 0-1
as.numeric(yesnofac)
# mutate function
# You can actually use the mutate function to create a new version of
# the variable and simultaneously added to a data set.
mutate_resturantdatam <- mutate(resturantdata, zipGroup = cut2(zipCode, g = 4))
# mutate function
# You can actually use the mutate function to create a new version of
# the variable and simultaneously added to a data set.
mutate_resturantdata <- mutate(resturantdata, zipGroup = cut2(zipCode, g = 4))
table(mutate_resturantdata$zipGroup)
table(resturantdata$zipGroup)
head(mutate_resturantdata)
head(resturantdata)
# mutate function
# You can actually use the mutate function to create a new version of
# the variable and simultaneously added to a data set.
library(dplyr)
mutate_resturantdata <- mutate(resturantdata, zipGroup = cut2(zipCode, g = 4))
table(mutate_resturantdata$zipGroup)
head(mutate_resturantdata)
head(resturantdata)
sqrt()
sqrt(3)
# common transforms
abs(-7)
ceiling(2.8765)
floor(2.8765)
library(reshape2)
head(mtcars)
# melting data frames
mtcars$carname <- rownames(mtcars)
mtcars$carname
carMelt <- melt(mtcars, id = c("carname", "gear", "cyl"), measure.vars = c("mpg", "hp"))
# now we have tall and skinny table
head(carMelt, n=3)
# now we have tall and skinny table
head(carMelt, n=10)
tail(carMelt, n=10)
# casting data frames
# now we can cast the data frame into different shapes
cylData <- dcast(carMelt, cyl ~ variable)
# casting data frames
# now we can cast the data frame into different shapes
cylData <- dcast(carMelt, cyl ~ variable)
# casting data frames
# now we can cast the data frame into different shapes
library(reshape2)
cylData <- dcast(carMelt, cyl ~ variable)
carMelt <- melt(mtcars, id = c("carname", "gear", "cyl"), measure.vars = c("mpg", "hp"))
cylData <- dcast(carMelt, cyl ~ variable)
cylData
# so it takes the data set and re-summarize it in a different way
cylData <- dcast(carMelt, cyl ~ variable, mean)
cylData
# averaging values within particular factors
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sum)
# another way for averaging is split-apply-combine
sprCount <- lapply(sprIns, sum)
# another way for averaging is split-apply-combine
sprIns = split(InsectSprays$count, InsectSprays$spray)
sprIns
sprCount <- lapply(sprIns, sum)
sprCount
# now we ahave a list
# but maybe it is easier to have these results in a vector so unlist them
unlist(sprCount)
# another way with plyr package
ddply(InsectSprays, .(spray), summarize, sum = sum(count))
# another way with plyr package
library(plyr)
ddply(InsectSprays, .(spray), summarize, sum = sum(count))
SpraySums <- ddply(InsectSprays, .(spray), summarize, sum = ave(count, FUN = sum))
head(SpraySums)
tail(SpraySums)
dim(SpraySums)
dim(InsectSprays)
# managing df with dplyr
library(dplyr)
chicago <- readRDS("chicago.rds")
chicago <- readRDS("chicago.rds")
getwd()
getwd()
chicago <- readRDS("chicago.rds")
getwd()
setwd("/Users/Beeta/Rcodes/datasciencecoursera/course3")
chicago <- readRDS("chicago.rds")
dim(chicago)
str(chicago)
names(chicago)
rownames(chicago)
colnames(chicago)
# let say u want to select all the cols between city and dptp
head(select(chicago, city:dptp))
# now I want to see all the cols except the city to dptp
head(select(chicago, -(city:dptp)))
head(chicago[,-(i:j)])
# to achieve same thing without using the dplyr package would be
i <- match("city", names(chicago))
j <- match("dptp", names(chicago))
head(chicago[,-(i:j)])
# to subset rows use filter
chic.f <- filter(chicago, pm25tmean2 > 30)
head(chic.f)
chic.f <- filter(chicago, pm25tmean2 > 30 & tmpd > 80)
head(chic.f)
# reorder the rows of a df with arrange function
chicago <- arrange(chicago, date)
chicago
head(chicago)
tail(chicago)
chicago <- arrange(chicago, desc(date))
head(chicago)
# renaming vars using rename function
chicago <- rename(chicago, pm25 = pm25tmean2, dewpoint = dptp)
head(chicago)
# renaming vars using rename function
chicago <- rename(chicago, pm25 = pm25tmean2, dewpoint = dptp)
head(chicago)
# renaming vars using rename function
chicago <- rename(chicago, "pm25" = "pm25tmean2", dewpoint = dptp)
# renaming vars using rename function
chicago <- rename(chicago, replace = c(pm25 = pm25tmean2, dewpoint = dptp))
# renaming vars using rename function
chicago <- rename(chicago, replace = c("pm25" = "pm25tmean2", "dewpoint" = "dptp"))
# renaming vars using rename function
chicago <- rename(chicago, replace = c("pm25tmean2" = "pm25",  "dptp" = "dewpoint"))
head(chicago)
# to transform and create new vars use mutate function
# we want to create a new var called pm25detrend in chicago df
chicago <- mutate(chicago, pm25detrend = pm25 - mean(pm25, na.rm = TRUE))
head(chicago)
head(select(chicago, pm25, pm25detrend)
head(select(chicago, pm25, pm25detrend))
head(select(chicago, "pm25", pm25detrend))
head(select(chicago, pm25, pm25detrend))
# groupby function is for splitting the df based on categorical vars
chicago <- mutate(chicago, tempcat = factor(1 * (tmpd > 80), labels = C("Hot", "Cold"))
# groupby function is for splitting the df based on categorical vars
chicago <- mutate(chicago, tempcat = factor(1 * (tmpd > 80), labels = C("Hot", "Cold")))
# groupby function is for splitting the df based on categorical vars
chicago <- mutate(chicago, tempcat = factor(1 * (tmpd > 80), labels = C("Hot", "Cold")))
# groupby function is for splitting the df based on categorical vars
chicago <- mutate(chicago, tempcat = factor(1 * (tmpd > 80), labels = c("Hot", "Cold")))
hotcold <- group_by(chicago, tempcat)
# groupby function is for splitting the df based on categorical vars
chicago <- mutate(chicago, tempcat = factor(1 * (tmpd > 80), labels = c("Hot", "Cold"), na.rm = TRUE))
hotcold <- group_by(chicago, tempcat)
# groupby function is for splitting the df based on categorical vars
chicago <- mutate(chicago, tempcat = factor(1 * (tmpd > 80), labels = c("Hot", "Cold")))
hotcold <- group_by(chicago, tempcat)
# groupby function is for splitting the df into categorical vars
# create a temperature category variables
# is a day hot or cold based o whether the temp is > 80 or not
chicago <- mutate(chicago, tempcat = factor(1 * (tmpd > 80), labels = c("Hot", "Cold"), na.rm = TRUE))
# groupby function is for splitting the df into categorical vars
# create a temperature category variables
# is a day hot or cold based o whether the temp is > 80 or not
chicago <- mutate(chicago, tempcat = factor(1 * (tmpd > 80), labels = c("Hot", "Cold")), na.rm = TRUE)
hotcold <- group_by(chicago, tempcat)
forcats::fct_explicit_na
hotcold
# now summarize the hotcold df
summarise(hotcold, pm25 = mean(pm25), o3 = max(o3tmean2), no2 = median(no2tmean2))
# now summarize the hotcold df
summarize(hotcold, pm25 = mean(pm25), o3 = max(o3tmean2), no2 = median(no2tmean2))
# groupby function is for splitting the df into categorical vars
# create a temperature category variables
# is a day hot or cold based o whether the temp is > 80 or not
chicago <- mutate(chicago, tempcat = factor(1 * (tmpd > 80), labels = c("Hot", "Cold")))
hotcold <- group_by(chicago, tempcat)
hotcold
# now summarize the hotcold df
summarize(hotcold, pm25 = mean(pm25), o3 = max(o3tmean2), no2 = median(no2tmean2))
# now summarize the hotcold df
summarize(hotcold, pm25 = mean(pm25, na.rm + TRUE), o3 = max(o3tmean2), no2 = median(no2tmean2))
# now summarize the hotcold df
summarize(hotcold, pm25 = mean(pm25, na.rm = TRUE), o3 = max(o3tmean2), no2 = median(no2tmean2))
# another example
chicago <- mutate(chicago, year = as.POSIXlt(date)$year + 1900)
years <- group_by(chicago, date)
summarize(years, pm25 = mean(pm25, na.rm = TRUE), o3 = max(o3tmean2), no2 = median(no2tmean2))
years
years <- group_by(chicago, year)
summarize(years, pm25 = mean(pm25, na.rm = TRUE), o3 = max(o3tmean2), no2 = median(no2tmean2))
# another example
chicago <- mutate(chicago, year = as.POSIXlt(date)$year + 1900)
years <- group_by(chicago, year)
summarize(years, pm25 = mean(pm25, na.rm = TRUE), o3 = max(o3tmean2), no2 = median(no2tmean2))
# working with pipeline operator %>%
# this is another way of doing the above mentioned but this time using pipeine
chicago %>% mutate(month = as.POSIXlt(date)$mon + 1) %>% group_by(month) %>% summarise(pm25 = mean(pm25,
na.rm = TRUE), o3 = max(o3tmean2), no2 = median(no2tmean2))
# working with pipeline operator %>%
# this is another way of doing the above mentioned but this time using pipeine
chicago %>% mutate(month = as.POSIXlt(date)$mon + 1) %>% group_by(month) %>% summarise(pm25 = mean(pm25,
na.rm = TRUE), o3 = max(o3tmean2), no2 = median(no2tmean2))
download.file( "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
setwd("/Users/Beeta/Rcodes/datasciencecoursera/course3")
idahoURL = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(idahoURL, destfile = "/Users/Beeta/Rcodes/datasciencecoursera/course3/idaho.csv" )
head(idaho.csv)
idaho <- read.csv("idaho.csv", header = TRUE)
head(idaho)
colnames(idaho)
agriculturelogical <- filter(idaho, ACR = 3 & AGS = 6)
agriculturelogical <- filter(idaho, ACR = 3 & AGS = 6)
head(agriculturelogical)
agriculturelogical <- filter(idaho, ACR = 3 & AGS = 6)
agriculturelogical <- filter(idaho, ACR == 3 & AGS == 6)
head(agriculturelogical)
which(agricultureLogical)
agricultureLogical <- filter(idaho, ACR == 3 & AGS == 6)
head(agriculturelogical)
which(agricultureLogical)
agriculture <- filter(idaho, ACR == 3 & AGS == 6)
head(agriculture)
agriculture <- filter(idaho, ACR == 3 & AGS == 6)
head(agriculture)
agriculturelogical <- agriculture$ACR == 3 & agriculture$AGS == 6
which(agricultureLogical)
head(agriculturelogical)
agricultureLogical <- idaho$ACR == 3 & idaho$AGS == 6
which(agricultureLogical)
head(agricultureLogical)
library(jpeg)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "quiz2jpeg.jpg")
jpgdat = readJPEG("quiz2jpeg.jpg", native = TRUE)
quantile(jpgdat, probs = c(0.3, 0.8))
library(data.table)
library(dplyr)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "quiz3data.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "quiz3data2.csv")
countries = fread("quiz3data.csv", skip=4, nrows = 190, select = c(1, 2, 4, 5), col.names=c("CountryCode", "Rank", "Economy", "Total"))
education = fread("quiz3data2.csv")
all = merge(countries, education, by = "CountryCode")
dim(all)
all <- arrange(all, desc(Rank))
head(all,13)[33]
all <- arrange(all, desc(Rank))
head(all,13)[33]
head(all,13)
head(all,13)["Long Name"]
head(select(all, Long Name)
head(select(all, Long Name))
head(select(all, "Long Name"))
all <- arrange(all, desc(Rank))
all <- arrange(all, desc(Rank))
all <- arrange(all, desc(Rank))
head(select(all, "Long Name"))
head(select(all, "Long Name"), n=15)
unique(all$`Income Group`)
tapply(all$Rank, all$`Income Group`, mean)
library(Hmisc)
all$RankGroups <- cut2(all$Rank, g=5)
table(all$RankGroups, all$`Income Group`)
table(all$RankGroups, all$`Income Group`)[4]
# quick refresh for lists
mylist <- list(letters = c("A", "b", "c"), numbers = 1:3, matrix(1:12, nrow = 3))
head(mylist)
mylist$``
mylist$numbers
mylist[[3]]
mylist$letters[2]
gsub("_", "", testName)
# replace _ with nothing in var names of df
# but if there are nultiple _ in one var name sub replaces only the first one
# for multiple use gsub
testName <- "just_for_fun"
testName <- "just_for_fun"
testName
gsub("_", "", testName)
testName
gsub("_", "", testName)
# searching and finding values
head(mtcars)
str(mtcars)
grep("Mazda RX4", x = mtcars$carname)
table(grepl("Mazda", mtcars$carname))
# subset data using grep
submtcars <- mtcars[!grepl("Mazda", mtcars$carname)]
# subset data using grep
submtcars <- mtcars[!grepl("Mazda", mtcars$carname),]
submtcars
# if you want grep to actually returns those values with "Mazda" in them
grep("Mazda", mtcars$carname, value = TRUE)
# if value is not there it returns integer(0)
grep("jimbo", mtcars$carname)
# integer(0)
# so suppose u want to check for a value in a vector
# u can grep that value then check the length of grep
length(grep("jimbo", mtcars$carname))
library(stringr)
nchar("Beeta ")
substr("Beeta", 1, 2)
# [1] "Be"
paste("B", "eeta")
# [1] "Be"
paste("B","eeta")
# [1] "Be"
paste("B", "eeta")
#[1] "B eeta"
paste0("B", "eeta")
# [1] "Beeta"
sep("Beeta")
# rid of spaces in the begining or end
str_trim("  Beeta   ")
# regular expressions
# metachars to show start of a line
# ^i
^i think
# working with dates
date()
# working with dates
d <- date()
class(d)
sd <- Sys.Date()
class(sd)
?POSIXct
?POSIXlt
